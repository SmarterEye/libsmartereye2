<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="793px" preserveAspectRatio="none" style="width:2011px;height:793px;" version="1.1" viewBox="0 0 2011 793" width="2011px" zoomAndPan="magnify"><defs><filter height="300%" id="f1tv2fvziu8rlp" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[d841c4c2f84d4e18d352f800547f43fc]
cluster platform--><polygon fill="#FFFFFF" filter="url(#f1tv2fvziu8rlp)" points="16,6,80,6,87,31.1201,1994,31.1201,1994,786,16,786,16,6" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="16" x2="87" y1="31.1201" y2="31.1201"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="58" x="20" y="24.0439">platform</text><!--MD5=[1a39633f8bdce792142f4039cb4df9d8]
class platform.Backend--><rect codeLine="4" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="123.1147" id="platform.Backend" style="stroke: #A80036; stroke-width: 1.5;" width="549" x="544.5" y="73.5"/><ellipse cx="790.75" cy="89.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M789.3281,94.8594 Q787.4688,94.8594 786.375,93.4688 Q785.2813,92.0781 785.2813,89.0938 Q785.2813,86.5625 786.4453,84.9063 Q787.6094,83.25 789.5938,83.25 Q791.0625,83.25 791.5313,83.375 Q792,83.5781 792,83.5781 Q792,83.5781 792,83.5078 Q792,83.4375 792.6094,82.5156 L793.6563,86.1719 L792.3281,86.5781 Q791.8594,85.0313 791.1953,84.3672 Q790.5313,83.7031 789.4688,83.7031 Q789.0781,83.7031 788.3125,85.2344 Q787.5469,86.7656 787.5469,89.0156 Q787.5469,91.4844 788.2109,92.875 Q788.875,94.2656 789.4063,94.2656 Q790.4688,94.2656 791.2266,93.5 Q791.9844,92.7344 792.3281,91.0781 L793.6563,91.6719 Q793.3281,93.0781 792.4297,93.9688 Q791.5313,94.8594 789.3281,94.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="48" x="811.25" y="95.0576">Backend</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="545.5" x2="1092.5" y1="105.5" y2="105.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="545.5" x2="1092.5" y1="113.5" y2="113.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="443" x="550.5" y="130.106">virtual std::shared_ptr&lt;CommandTransfer&gt; createUsbDevice(UsbDeviceInfo info) const = 0;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="550.5" y="145.1289">virtual std::vector&lt;UsbDeviceInfo&gt; queryUsbDevices() const = 0;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="550.5" y="160.1519">virtual std::shared_ptr&lt;platform::TimeService&gt; createTimeService() const = 0;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="550.5" y="175.1748">virtual std::shared_ptr&lt;DeviceWather&gt; createDeviceWatcher() const = 0;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="550.5" y="190.1978">virtual std::string getDeviceSerial(uint16_t device_vid, uint16_t device_pid, const std::string &amp;device_uid) const;</text><!--MD5=[8c8b2e6cbfb36135b24cc890e9a33d0c]
class platform.RecordBackend--><rect codeLine="13" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="63.0229" id="platform.RecordBackend" style="stroke: #A80036; stroke-width: 1.5;" width="120" x="431" y="504.5"/><ellipse cx="446" cy="520.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M444.5781,525.8594 Q442.7188,525.8594 441.625,524.4688 Q440.5313,523.0781 440.5313,520.0938 Q440.5313,517.5625 441.6953,515.9063 Q442.8594,514.25 444.8438,514.25 Q446.3125,514.25 446.7813,514.375 Q447.25,514.5781 447.25,514.5781 Q447.25,514.5781 447.25,514.5078 Q447.25,514.4375 447.8594,513.5156 L448.9063,517.1719 L447.5781,517.5781 Q447.1094,516.0313 446.4453,515.3672 Q445.7813,514.7031 444.7188,514.7031 Q444.3281,514.7031 443.5625,516.2344 Q442.7969,517.7656 442.7969,520.0156 Q442.7969,522.4844 443.4609,523.875 Q444.125,525.2656 444.6563,525.2656 Q445.7188,525.2656 446.4766,524.5 Q447.2344,523.7344 447.5781,522.0781 L448.9063,522.6719 Q448.5781,524.0781 447.6797,524.9688 Q446.7813,525.8594 444.5781,525.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="460" y="526.0576">RecordBackend</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="432" x2="550" y1="536.5" y2="536.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="29" x="437" y="553.106">TODO</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="432" x2="550" y1="559.5229" y2="559.5229"/><!--MD5=[6133ca90392ba750ba08e31c50551a26]
class platform.PlaybackBackend--><rect codeLine="18" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="63.0229" id="platform.PlaybackBackend" style="stroke: #A80036; stroke-width: 1.5;" width="129" x="586.5" y="504.5"/><ellipse cx="601.5" cy="520.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M600.0781,525.8594 Q598.2188,525.8594 597.125,524.4688 Q596.0313,523.0781 596.0313,520.0938 Q596.0313,517.5625 597.1953,515.9063 Q598.3594,514.25 600.3438,514.25 Q601.8125,514.25 602.2813,514.375 Q602.75,514.5781 602.75,514.5781 Q602.75,514.5781 602.75,514.5078 Q602.75,514.4375 603.3594,513.5156 L604.4063,517.1719 L603.0781,517.5781 Q602.6094,516.0313 601.9453,515.3672 Q601.2813,514.7031 600.2188,514.7031 Q599.8281,514.7031 599.0625,516.2344 Q598.2969,517.7656 598.2969,520.0156 Q598.2969,522.4844 598.9609,523.875 Q599.625,525.2656 600.1563,525.2656 Q601.2188,525.2656 601.9766,524.5 Q602.7344,523.7344 603.0781,522.0781 L604.4063,522.6719 Q604.0781,524.0781 603.1797,524.9688 Q602.2813,525.8594 600.0781,525.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="615.5" y="526.0576">PlaybackBackend</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="587.5" x2="714.5" y1="536.5" y2="536.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="29" x="592.5" y="553.106">TODO</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="587.5" x2="714.5" y1="559.5229" y2="559.5229"/><!--MD5=[1e5f40416c0a4718b02838da65a1f0da]
class platform.StandardBackend--><rect codeLine="23" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="138.1377" id="platform.StandardBackend" style="stroke: #A80036; stroke-width: 1.5;" width="448" x="751" y="467"/><ellipse cx="921.75" cy="483" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M920.3281,488.3594 Q918.4688,488.3594 917.375,486.9688 Q916.2813,485.5781 916.2813,482.5938 Q916.2813,480.0625 917.4453,478.4063 Q918.6094,476.75 920.5938,476.75 Q922.0625,476.75 922.5313,476.875 Q923,477.0781 923,477.0781 Q923,477.0781 923,477.0078 Q923,476.9375 923.6094,476.0156 L924.6563,479.6719 L923.3281,480.0781 Q922.8594,478.5313 922.1953,477.8672 Q921.5313,477.2031 920.4688,477.2031 Q920.0781,477.2031 919.3125,478.7344 Q918.5469,480.2656 918.5469,482.5156 Q918.5469,484.9844 919.2109,486.375 Q919.875,487.7656 920.4063,487.7656 Q921.4688,487.7656 922.2266,487 Q922.9844,486.2344 923.3281,484.5781 L924.6563,485.1719 Q924.3281,486.5781 923.4297,487.4688 Q922.5313,488.3594 920.3281,488.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="98" x="942.25" y="488.5576">StandardBackend</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="752" x2="1198" y1="499" y2="499"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="757" y="515.606">std::chrono::high_resolution_clock::time_point start_time_point_;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="752" x2="1198" y1="522.0229" y2="522.0229"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="757" y="538.6289">StandardBackend();</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="757" y="553.6519">std::shared_ptr&lt;CommandTransfer&gt; createUsbDevice(UsbDeviceInfo info) const override;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="757" y="568.6748">std::vector&lt;UsbDeviceInfo&gt; queryUsbDevices() const override;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="757" y="583.6978">std::shared_ptr&lt;platform::TimeService&gt; createTimeService() const override;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="757" y="598.7207">std::shared_ptr&lt;DeviceWather&gt; createDeviceWatcher() const override;</text><!--MD5=[406f3184e7543317b5ad634c1a5e067f]
class platform.UsbDevice--><rect codeLine="32" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="198.2295" id="platform.UsbDevice" style="stroke: #A80036; stroke-width: 1.5;" width="309" x="1257.5" y="36"/><ellipse cx="1377.75" cy="52" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1376.3281,57.3594 Q1374.4688,57.3594 1373.375,55.9688 Q1372.2813,54.5781 1372.2813,51.5938 Q1372.2813,49.0625 1373.4453,47.4063 Q1374.6094,45.75 1376.5938,45.75 Q1378.0625,45.75 1378.5313,45.875 Q1379,46.0781 1379,46.0781 Q1379,46.0781 1379,46.0078 Q1379,45.9375 1379.6094,45.0156 L1380.6563,48.6719 L1379.3281,49.0781 Q1378.8594,47.5313 1378.1953,46.8672 Q1377.5313,46.2031 1376.4688,46.2031 Q1376.0781,46.2031 1375.3125,47.7344 Q1374.5469,49.2656 1374.5469,51.5156 Q1374.5469,53.9844 1375.2109,55.375 Q1375.875,56.7656 1376.4063,56.7656 Q1377.4688,56.7656 1378.2266,56 Q1378.9844,55.2344 1379.3281,53.5781 L1380.6563,54.1719 Q1380.3281,55.5781 1379.4297,56.4688 Q1378.5313,57.3594 1376.3281,57.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="1398.25" y="57.5576">UsbDevice</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1258.5" x2="1565.5" y1="68" y2="68"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1263.5" y="84.606">const libusb_device_descriptor &amp;desc,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="1263.5" y="99.6289">UsbDeviceInfo info,</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1258.5" x2="1565.5" y1="106.0459" y2="106.0459"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1263.5" y="122.6519">UsbDevice(libusb_device *device,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1263.5" y="137.6748">std::shared_ptr&lt;UsbContext&gt; context);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1266.5" y="152.6978"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1263.5" y="167.7207">UsbDeviceInfo getInfo() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="1263.5" y="182.7437">std::vector&lt;SeUsbInterface&gt; getInterfaces() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="1263.5" y="197.7666">SeUsbInterface getInterface(uint8_t interface_number) const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1263.5" y="212.7896">SeUsbMessenger open(uint8_t interface_number);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="1263.5" y="227.8125">const std::vector&lt;UsbDescriptor&gt; get_descriptors() const;</text><!--MD5=[005c656adcd7ed60bb41a9a68bed3eb9]
class platform.UsbEndpoint--><rect codeLine="45" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="168.1836" id="platform.UsbEndpoint" style="stroke: #A80036; stroke-width: 1.5;" width="366" x="1602" y="51"/><ellipse cx="1744.75" cy="67" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1743.3281,72.3594 Q1741.4688,72.3594 1740.375,70.9688 Q1739.2813,69.5781 1739.2813,66.5938 Q1739.2813,64.0625 1740.4453,62.4063 Q1741.6094,60.75 1743.5938,60.75 Q1745.0625,60.75 1745.5313,60.875 Q1746,61.0781 1746,61.0781 Q1746,61.0781 1746,61.0078 Q1746,60.9375 1746.6094,60.0156 L1747.6563,63.6719 L1746.3281,64.0781 Q1745.8594,62.5313 1745.1953,61.8672 Q1744.5313,61.2031 1743.4688,61.2031 Q1743.0781,61.2031 1742.3125,62.7344 Q1741.5469,64.2656 1741.5469,66.5156 Q1741.5469,68.9844 1742.2109,70.375 Q1742.875,71.7656 1743.4063,71.7656 Q1744.4688,71.7656 1745.2266,71 Q1745.9844,70.2344 1746.3281,68.5781 L1747.6563,69.1719 Q1747.3281,70.5781 1746.4297,71.4688 Q1745.5313,72.3594 1743.3281,72.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="1765.25" y="72.5576">UsbEndpoint</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1603" x2="1967" y1="83" y2="83"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="1608" y="99.606">libusb_endpoint_descriptor endpoint_descriptor_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="1608" y="114.6289">uint8_t interface_number_;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1603" x2="1967" y1="121.0459" y2="121.0459"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="1608" y="137.6519">UsbEndpoint(libusb_endpoint_descriptor desc, uint8_t interface_number);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1608" y="152.6748">uint8_t getAddress() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="1608" y="167.6978">EndpointType getType() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="1608" y="182.7207">uint8_t getInterfaceNumber() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="1608" y="197.7437">EndpointDirection getDirection() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="1608" y="212.7666">libusb_endpoint_descriptor getDescriptor();</text><!--MD5=[e3d52ff33fb2b332312a8cce0dc66873]
class platform.UsbInterface--><rect codeLine="57" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="228.2754" id="platform.UsbInterface" style="stroke: #A80036; stroke-width: 1.5;" width="355" x="1234.5" y="422"/><ellipse cx="1372.75" cy="438" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1371.3281,443.3594 Q1369.4688,443.3594 1368.375,441.9688 Q1367.2813,440.5781 1367.2813,437.5938 Q1367.2813,435.0625 1368.4453,433.4063 Q1369.6094,431.75 1371.5938,431.75 Q1373.0625,431.75 1373.5313,431.875 Q1374,432.0781 1374,432.0781 Q1374,432.0781 1374,432.0078 Q1374,431.9375 1374.6094,431.0156 L1375.6563,434.6719 L1374.3281,435.0781 Q1373.8594,433.5313 1373.1953,432.8672 Q1372.5313,432.2031 1371.4688,432.2031 Q1371.0781,432.2031 1370.3125,433.7344 Q1369.5469,435.2656 1369.5469,437.5156 Q1369.5469,439.9844 1370.2109,441.375 Q1370.875,442.7656 1371.4063,442.7656 Q1372.4688,442.7656 1373.2266,442 Q1373.9844,441.2344 1374.3281,439.5781 L1375.6563,440.1719 Q1375.3281,441.5781 1374.4297,442.4688 Q1373.5313,443.3594 1371.3281,443.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="1393.25" y="443.5576">UsbInterface</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1235.5" x2="1588.5" y1="454" y2="454"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1240.5" y="470.606">libusb_interface_descriptor usb_desc_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="1240.5" y="485.6289">std::vector&lt;std::shared_ptr&lt;UsbEndpoint&gt;&gt; endpoints_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="1240.5" y="500.6519">std::vector&lt;SeUsbInterface&gt; associated_interfaces_;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1235.5" x2="1588.5" y1="507.0688" y2="507.0688"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="1240.5" y="523.6748">explicit UsbInterface(const libusb_interface *interface);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="1240.5" y="538.6978">uint8_t getNumber() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1240.5" y="553.7207">uint8_t getClass() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="1240.5" y="568.7437">uint8_t getSubclass() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="1240.5" y="583.7666">std::vector&lt;SeUsbEndpoint&gt; getEndpoints() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="1240.5" y="598.7896">SeUsbEndpoint firstEndpoint(EndpointDirection direction,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="1240.5" y="613.8125">EndpointType type = EndpointType::SE2_USB_ENDPOINT_BULK) const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="1240.5" y="628.8354">std::vector&lt;SeUsbInterface&gt; getAssociatedInterfaces() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="1240.5" y="643.8584">void addAssociatedInterface(const SeUsbInterface &amp;interface);</text><!--MD5=[815ae2faf142024904a5408c7575118e]
class platform.UsbMessenger--><rect codeLine="74" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="183.2065" id="platform.UsbMessenger" style="stroke: #A80036; stroke-width: 1.5;" width="485" x="24.5" y="43.5"/><ellipse cx="220.25" cy="59.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M218.8281,64.8594 Q216.9688,64.8594 215.875,63.4688 Q214.7813,62.0781 214.7813,59.0938 Q214.7813,56.5625 215.9453,54.9063 Q217.1094,53.25 219.0938,53.25 Q220.5625,53.25 221.0313,53.375 Q221.5,53.5781 221.5,53.5781 Q221.5,53.5781 221.5,53.5078 Q221.5,53.4375 222.1094,52.5156 L223.1563,56.1719 L221.8281,56.5781 Q221.3594,55.0313 220.6953,54.3672 Q220.0313,53.7031 218.9688,53.7031 Q218.5781,53.7031 217.8125,55.2344 Q217.0469,56.7656 217.0469,59.0156 Q217.0469,61.4844 217.7109,62.875 Q218.375,64.2656 218.9063,64.2656 Q219.9688,64.2656 220.7266,63.5 Q221.4844,62.7344 221.8281,61.0781 L223.1563,61.6719 Q222.8281,63.0781 221.9297,63.9688 Q221.0313,64.8594 218.8281,64.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="240.75" y="65.0576">UsbMessenger</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25.5" x2="508.5" y1="75.5" y2="75.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="30.5" y="92.106">const std::shared_ptr&lt;UsbDevice&gt; device_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="30.5" y="107.1289">std::mutex mutex_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="30.5" y="122.1519">std::shared_ptr&lt;UsbHandle&gt; handle_;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25.5" x2="508.5" y1="128.5688" y2="128.5688"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="30.5" y="145.1748">UsbMessenger(const std::shared_ptr&lt;UsbDevice&gt; &amp;device, std::shared_ptr&lt;UsbHandle&gt; handle);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="30.5" y="160.1978">int control_transfer(int request_type, int request, int value, int index,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="30.5" y="175.2207">uint8_t *buffer, uint32_t length, uint32_t &amp;transferred, uint32_t timeout_ms);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="30.5" y="190.2437">int bulk_transfer(const SeUsbEndpoint &amp;endpoint, uint8_t *buffer,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="30.5" y="205.2666">uint32_t length, uint32_t &amp;transferred, uint32_t timeout_ms);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="30.5" y="220.2896">int reset_endpoint(const SeUsbEndpoint &amp;endpoint, uint32_t timeout_ms);</text><!--MD5=[b49b2b8b2370390ebc2c0bee28f4d058]
class platform.UsbRequest--><rect codeLine="87" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="483.6655" id="platform.UsbRequest" style="stroke: #A80036; stroke-width: 1.5;" width="372" x="24" y="294"/><ellipse cx="170.75" cy="310" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M169.3281,315.3594 Q167.4688,315.3594 166.375,313.9688 Q165.2813,312.5781 165.2813,309.5938 Q165.2813,307.0625 166.4453,305.4063 Q167.6094,303.75 169.5938,303.75 Q171.0625,303.75 171.5313,303.875 Q172,304.0781 172,304.0781 Q172,304.0781 172,304.0078 Q172,303.9375 172.6094,303.0156 L173.6563,306.6719 L172.3281,307.0781 Q171.8594,305.5313 171.1953,304.8672 Q170.5313,304.2031 169.4688,304.2031 Q169.0781,304.2031 168.3125,305.7344 Q167.5469,307.2656 167.5469,309.5156 Q167.5469,311.9844 168.2109,313.375 Q168.875,314.7656 169.4063,314.7656 Q170.4688,314.7656 171.2266,314 Q171.9844,313.2344 172.3281,311.5781 L173.6563,312.1719 Q173.3281,313.5781 172.4297,314.4688 Q171.5313,315.3594 169.3281,315.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="191.25" y="315.5576">UsbRequest</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25" x2="395" y1="326" y2="326"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="30" y="342.606">void *client_data_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="30" y="357.6289">SeUsbRequest request_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="30" y="372.6519">SeUsbEndpoint endpoint_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="30" y="387.6748">std::vector&lt;uint8_t&gt; buffer_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="30" y="402.6978">SeUsbRequestCallback callback_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="33" y="417.7207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="30" y="432.7437">bool active_ = false;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="30" y="447.7666">std::weak_ptr&lt;UsbRequest&gt; shared_;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="30" y="462.7896">std::shared_ptr&lt;libusb_transfer&gt; transfer_;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25" x2="395" y1="469.2065" y2="469.2065"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="30" y="485.8125">UsbRequest(libusb_device_handle *dev_handle, SeUsbEndpoint endpoint);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="33" y="500.8354"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="30" y="515.8584">SeUsbEndpoint get_endpoint() const；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="30" y="530.8813">int get_actual_length() const；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="30" y="545.9043">void set_callback(const SeUsbRequestCallback &amp;callback)；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="30" y="560.9272">SeUsbRequestCallback get_callback() const；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="30" y="575.9502">void set_client_data(void *data)；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="30" y="590.9731">void *get_client_data() const；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="30" y="605.9961">void *get_native_request() const；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="30" y="621.019">const std::vector&lt;uint8_t&gt; &amp;get_buffer() const；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="30" y="636.042">void set_buffer(const std::vector&lt;uint8_t&gt; &amp;buffer);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="33" y="651.0649"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="30" y="666.0879">std::shared_ptr&lt;UsbRequest&gt; get_shared() const；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="30" y="681.1108">void set_shared(const std::shared_ptr&lt;UsbRequest&gt; &amp;shared)；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="30" y="696.1338">void set_active(bool state)；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="33" y="711.1567"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="30" y="726.1797">void set_native_buffer_length(int length)；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="30" y="741.2026">int get_native_buffer_length() const；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="30" y="756.2256">void set_native_buffer(uint8_t *buffer)；</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="30" y="771.2485">uint8_t *get_native_buffer() const；</text><!--MD5=[2f0d09bb4461ab1895996c40ff0fa472]
class platform.UsbHandle--><rect codeLine="122" fill="#FEFECE" filter="url(#f1tv2fvziu8rlp)" height="183.2065" id="platform.UsbHandle" style="stroke: #A80036; stroke-width: 1.5;" width="361" x="1624.5" y="444.5"/><ellipse cx="1769.25" cy="460.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1767.8281,465.8594 Q1765.9688,465.8594 1764.875,464.4688 Q1763.7813,463.0781 1763.7813,460.0938 Q1763.7813,457.5625 1764.9453,455.9063 Q1766.1094,454.25 1768.0938,454.25 Q1769.5625,454.25 1770.0313,454.375 Q1770.5,454.5781 1770.5,454.5781 Q1770.5,454.5781 1770.5,454.5078 Q1770.5,454.4375 1771.1094,453.5156 L1772.1563,457.1719 L1770.8281,457.5781 Q1770.3594,456.0313 1769.6953,455.3672 Q1769.0313,454.7031 1767.9688,454.7031 Q1767.5781,454.7031 1766.8125,456.2344 Q1766.0469,457.7656 1766.0469,460.0156 Q1766.0469,462.4844 1766.7109,463.875 Q1767.375,465.2656 1767.9063,465.2656 Q1768.9688,465.2656 1769.7266,464.5 Q1770.4844,463.7344 1770.8281,462.0781 L1772.1563,462.6719 Q1771.8281,464.0781 1770.9297,464.9688 Q1770.0313,465.8594 1767.8281,465.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="63" x="1789.75" y="466.0576">UsbHandle</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1625.5" x2="1984.5" y1="476.5" y2="476.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1630.5" y="493.106">std::shared_ptr&lt;UsbContext&gt; _context;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="1630.5" y="508.1289">std::shared_ptr&lt;UsbInterface&gt; _first_interface;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="1630.5" y="523.1519">libusb_device_handle *_handle;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1625.5" x2="1984.5" y1="529.5688" y2="529.5688"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="1630.5" y="546.1748">UsbHandle(std::shared_ptr&lt;UsbContext&gt; context,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="1630.5" y="561.1978">libusb_device *device, const std::shared_ptr&lt;UsbInterface&gt;&amp; interface);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1633.5" y="576.2207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1630.5" y="591.2437">libusb_device_handle *get() const;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="1630.5" y="606.2666">void claim_interface_or_throw(uint8_t interface);</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="1630.5" y="621.2896">int claim_interface(uint8_t interface_number);</text><!--MD5=[e62fa70c435e4a79f21510659ea5d7a3]
reverse link platform.Backend to platform.RecordBackend--><path codeLine="12" d="M668.96,207.32 C632.16,230.65 595.7,259.6 569,294 C519.11,358.27 500.59,455.51 494.16,504.5 " fill="none" id="platform.Backend-backto-platform.RecordBackend" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="665.72,201.09,686.44,196.65,673.02,213.04,665.72,201.09" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d1a77c2f64652550446444eff6d32726]
reverse link platform.Backend to platform.PlaybackBackend--><path codeLine="17" d="M773.61,214.37 C759.99,239.39 745.61,267.48 734,294 C701.79,367.58 673.53,457.96 659.81,504.34 " fill="none" id="platform.Backend-backto-platform.PlaybackBackend" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="767.54,210.88,783.33,196.75,779.79,217.65,767.54,210.88" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4a963bf48d80ad07a31e2f2a3c5a0d26]
reverse link platform.Backend to platform.StandardBackend--><path codeLine="22" d="M850.05,215.43 C878.8,288.94 921.08,397.1 948.33,466.8 " fill="none" id="platform.Backend-backto-platform.StandardBackend" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="843.46,217.78,842.69,196.6,856.5,212.68,843.46,217.78" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d302e3c4489211ac637372d468fd6faf]
link platform.UsbMessenger to platform.UsbRequest--><!--MD5=[0e23b39fde453f7de7dae2958a748b32]
link platform.UsbDevice to platform.UsbEndpoint--><!--MD5=[99b3457cdb381252a4869978b7974431]
link platform.UsbDevice to platform.UsbInterface--><!--MD5=[72178db48951d19c50d06f9eb2db574d]
link platform.UsbInterface to platform.UsbHandle--><!--MD5=[eae99fccfdec82a3f24480a5f4fcf96a]
@startuml

namespace platform {

class Backend {
  virtual std::shared_ptr<CommandTransfer> createUsbDevice(UsbDeviceInfo info) const = 0;
  virtual std::vector<UsbDeviceInfo> queryUsbDevices() const = 0;
  virtual std::shared_ptr<platform::TimeService> createTimeService() const = 0;
  virtual std::shared_ptr<DeviceWather> createDeviceWatcher() const = 0;
  virtual std::string getDeviceSerial(uint16_t device_vid, uint16_t device_pid, const std::string &device_uid) const;
}

Backend <|- - RecordBackend
class RecordBackend  {
    TODO
}

Backend <|- - PlaybackBackend
class PlaybackBackend {
    TODO
}

Backend <|- - StandardBackend
class StandardBackend {
    StandardBackend();
    std::shared_ptr<CommandTransfer> createUsbDevice(UsbDeviceInfo info) const override;
    std::vector<UsbDeviceInfo> queryUsbDevices() const override;
    std::shared_ptr<platform::TimeService> createTimeService() const override;
    std::shared_ptr<DeviceWather> createDeviceWatcher() const override;
    std::chrono::high_resolution_clock::time_point start_time_point_;
}

class UsbDevice {
  UsbDevice(libusb_device *device,
            const libusb_device_descriptor &desc,
            UsbDeviceInfo info,
            std::shared_ptr<UsbContext> context);

  UsbDeviceInfo getInfo() const;
  std::vector<SeUsbInterface> getInterfaces() const;
  SeUsbInterface getInterface(uint8_t interface_number) const;
  SeUsbMessenger open(uint8_t interface_number);
  const std::vector<UsbDescriptor> get_descriptors() const;
}

class UsbEndpoint {
  UsbEndpoint(libusb_endpoint_descriptor desc, uint8_t interface_number);
  uint8_t getAddress() const;
  EndpointType getType() const;
  uint8_t getInterfaceNumber() const;
  EndpointDirection getDirection() const;
  libusb_endpoint_descriptor getDescriptor();

  libusb_endpoint_descriptor endpoint_descriptor_;
  uint8_t interface_number_;
}

class UsbInterface {
  explicit UsbInterface(const libusb_interface *interface);
  uint8_t getNumber() const;
  uint8_t getClass() const;
  uint8_t getSubclass() const;
  std::vector<SeUsbEndpoint> getEndpoints() const;
  SeUsbEndpoint firstEndpoint(EndpointDirection direction,
                              EndpointType type = EndpointType::SE2_USB_ENDPOINT_BULK) const;
  std::vector<SeUsbInterface> getAssociatedInterfaces() const;
  void addAssociatedInterface(const SeUsbInterface &interface);

  libusb_interface_descriptor usb_desc_;
  std::vector<std::shared_ptr<UsbEndpoint>> endpoints_;
  std::vector<SeUsbInterface> associated_interfaces_;
}


class UsbMessenger {
  UsbMessenger(const std::shared_ptr<UsbDevice> &device, std::shared_ptr<UsbHandle> handle);
  int control_transfer(int request_type, int request, int value, int index,
                       uint8_t *buffer, uint32_t length, uint32_t &transferred, uint32_t timeout_ms);
  int bulk_transfer(const SeUsbEndpoint &endpoint, uint8_t *buffer,
                    uint32_t length, uint32_t &transferred, uint32_t timeout_ms);
  int reset_endpoint(const SeUsbEndpoint &endpoint, uint32_t timeout_ms);

  const std::shared_ptr<UsbDevice> device_;
  std::mutex mutex_;
  std::shared_ptr<UsbHandle> handle_;
}

class UsbRequest {
  UsbRequest(libusb_device_handle *dev_handle, SeUsbEndpoint endpoint);

  SeUsbEndpoint get_endpoint() const；
  int get_actual_length() const；
  void set_callback(const SeUsbRequestCallback &callback)；
  SeUsbRequestCallback get_callback() const；
  void set_client_data(void *data)；
  void *get_client_data() const；
  void *get_native_request() const；
  const std::vector<uint8_t> &get_buffer() const；
  void set_buffer(const std::vector<uint8_t> &buffer);

  std::shared_ptr<UsbRequest> get_shared() const；
  void set_shared(const std::shared_ptr<UsbRequest> &shared)；
  void set_active(bool state)；

  void set_native_buffer_length(int length)；
  int get_native_buffer_length() const；
  void set_native_buffer(uint8_t *buffer)；
  uint8_t *get_native_buffer() const；

  void *client_data_;
  SeUsbRequest request_;
  SeUsbEndpoint endpoint_;
  std::vector<uint8_t> buffer_;
  SeUsbRequestCallback callback_;

  bool active_ = false;
  std::weak_ptr<UsbRequest> shared_;
  std::shared_ptr<libusb_transfer> transfer_;
}

UsbMessenger -[hidden]- UsbRequest

class UsbHandle {
  UsbHandle(std::shared_ptr<UsbContext> context,
            libusb_device *device, const std::shared_ptr<UsbInterface>& interface);

  libusb_device_handle *get() const;
  void claim_interface_or_throw(uint8_t interface);
  int claim_interface(uint8_t interface_number);

  std::shared_ptr<UsbContext> _context;
  std::shared_ptr<UsbInterface> _first_interface;
  libusb_device_handle *_handle;
}

}

@enduml

PlantUML version 1.2020.18(Thu Oct 01 03:40:44 CST 2020)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) Client VM
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>